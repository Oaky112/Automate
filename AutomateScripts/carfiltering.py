# -*- coding: utf-8 -*-
"""CarFiltering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P_st6x70CZR1Moo6asRF4Cd90H5DxZQs
"""

#Kyle Jones
#Car Filtering
#Imports
import pandas as pd
import os
import numpy as np
import random

#Import merged data
features = ["make","model","year","price","transmission","mileage","fuelType","tax","mpg","engineSize","maintenanceCostYearly","stars","colour","co2(metric tons per year)"]
merged_df = pd.read_csv("/content/drive/MyDrive/RGU/RGU Hack 2024/merged_data.csv", names=features, index_col=False)
merged_df = merged_df.iloc[1:]

#Check dataframe types
for column in merged_df.columns:
    print(f"Column '{column}' has data type: {merged_df[column].dtype}")

#Update stars to int
merged_df['make'] = merged_df['make'].astype(str)
merged_df['model'] = merged_df['model'].astype(str)
merged_df['year'] = merged_df['year'].astype(int)
merged_df['price'] = merged_df['price'].astype(int)
merged_df['transmission'] = merged_df['transmission'].astype(str)
merged_df['mileage'] = merged_df['mileage'].astype(int)
merged_df['fuelType'] = merged_df['fuelType'].astype(str)
merged_df['tax'] = merged_df['tax'].astype(int)
merged_df['mpg'] = merged_df['mpg'].astype(float)
merged_df['engineSize'] = merged_df['engineSize'].astype(float)
merged_df['maintenanceCostYearly'] = merged_df['maintenanceCostYearly'].astype(float)
merged_df['stars'] = merged_df['stars'].astype(int)
merged_df['colour'] = merged_df['colour'].astype(str)
merged_df['co2(metric tons per year)'] = merged_df['co2(metric tons per year)'].astype(float)

#Select 3 random makes to test filtering
unique_values = merged_df['make'].unique()
random.shuffle(unique_values)
randBrands = unique_values[:3]
print(randBrands)

#Select a rnage of stars tp test filtering
starsSelec = [3,5]
print(starsSelec)

#Insurance for testing
yearInsurance = 1350

#Mileage for testing
yearMileage = 23731.68

#Created methods to filter by range or selection

#Filters options where you select multiple
def filterBySelection(df, column_name, values_to_keep):
    # Check if the array of values to keep is empty and if so return all
    if len(values_to_keep) == 0:
        return df
    # Filter the DataFrame based on whether values in the specified column are present in the array
    filtered_df = df[df[column_name].isin(values_to_keep)]
    # Reset the index after filtering
    filtered_df.reset_index(drop=True, inplace=True)
    return filtered_df

#Filters options in a range
def filterByRange(df, column_name, range):
    lower, higher = range
    # Filter the DataFrame based on the range of values in the specified column
    filtered_df = df[(df[column_name] >= lower) & (df[column_name] <= higher)]
    # Reset the index after filtering
    filtered_df.reset_index(drop=True, inplace=True)
    return filtered_df

#Test filter by selection
filtered_df = filterBySelection(merged_df, 'make', randBrands)
print("Filtered DataFrame:")

#Test filter by range
filtered_df2 = filterByRange(filtered_df, 'stars', starsSelec)
print("Filtered DataFrame:")

def calculate_1_year_cost(row, mileage, insurance):
    gallonsUsed = mileage / row['mpg']
    litresUsed = gallonsUsed * 4.546
    fuelPrice = 0

    if row['fuelType'] == "Petrol":
        fuelPrice = 1.4
    elif row['fuelType'] == "Diesel":
        fuelPrice = 1.45
    elif row['fuelType'] == "Hybrid" or row['fuelType'] == "Other":
        fuelPrice = 1
    elif row['fuelType'] == "Electric":
        fuelPrice = 0.8

    fuelYearCost = litresUsed * fuelPrice
    return insurance + row['maintenanceCostYearly'] + row['tax'] + fuelYearCost

filtered_df2['1_year_cost'] = filtered_df2.apply(lambda row: round(calculate_1_year_cost(row, yearMileage, yearInsurance), 2), axis=1)

df_sorted = filtered_df2.sort_values(by='1_year_cost', ascending=True).reset_index(drop=True)
